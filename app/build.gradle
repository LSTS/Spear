apply plugin: 'com.android.application'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "pt.lsts.spear"
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 2001
        // versionName "2.0.0.1 (" + gitBranch() + "@" + gitSHA() + ")"
        versionName "2.0.0.1"
        resValue "string", "gitBranch", gitBranch()
        resValue "string", "gitSHA", gitSHA()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "long", "TIMESTAMP", System.currentTimeMillis() + "L"
        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        pickFirst 'META-INF/INDEX'
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'

    }
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
    }

    buildTypes {
        release {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

static def gitBranch() {
    def branch = ""
    def proc = "git rev-parse --abbrev-ref HEAD".execute()
    proc.in.eachLine { line -> branch = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    branch
}

static def gitSHA() {
    def sha = ""
    def proc = "git rev-parse --short HEAD".execute()
    proc.in.eachLine { line -> sha = line }
    proc.err.eachLine { line -> println line }
    proc.waitFor()
    sha
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation('com.google.code.gson:gson:2.8.4') {
        exclude module: 'gson:2.7'

    }
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:mediarouter-v7:27.1.1'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support:support-v4:27.1.1'
    testImplementation 'junit:junit:4.12'
    apply plugin: 'com.android.application'
    implementation 'com.android.support:support-annotations:27.1.1'
    implementation 'org.androidannotations:androidannotations:4.3.1'
    annotationProcessor 'org.androidannotations:androidannotations:4.3.1'
    implementation 'org.androidannotations:androidannotations-roboguice:4.3.1'
    implementation 'org.osmdroid:osmdroid-android:5.6.5'
    implementation 'org.osmdroid:osmdroid-third-party:5.6.5'
    implementation 'org.slf4j:slf4j-android:1.7.25'
    implementation 'com.android.support:preference-v7:27.1.1'
    implementation files('libs/AreaCoverage-v1.2.jar')
    compileOnly files('libs/msgsender.jar')
    implementation files('libs/libimc.jar')
    implementation 'javax.xml.bind:jaxb-api:2.2.12-b140109.1041'
    implementation 'com.github.MKergall:osmbonuspack:6.4'
    implementation 'org.jetbrains:annotations-java5:15.0'
    implementation 'commons-codec:commons-codec:1.9'
    implementation 'org.greenrobot:essentials:3.0.0-RC1'
    implementation 'com.firebase:firebase-client-android:2.5.2'
    implementation 'org.jbundle.util.osgi.wrapped:org.jbundle.util.osgi.wrapped.org.apache.http.client:4.1.2'


    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
}
repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
    jcenter()

}

